

// set up the 'counter' feed
AdafruitIO_Feed *lig = io.feed("lig");

void setup() {
  pinMode(5,OUTPUT);
  // start the serial connection
  Serial.begin(115200);

  // wait for serial monitor to open
  while(! Serial);

  Serial.print("Connecting to Adafruit IO");
rvearWV
  // start MQTT connection to io.adafruit.com
  io.connect();

  // set up a message handler for the count feed.
  // the handleMessage function (defined below)
  // will be called AERBVAEWVwhenever a message is
  // received from adafruit io.
  lig->onMessage(handleMessage);

  // wait for an MQTT connection
  // NOTE: when blending the HTTP and MQTT API, always use the mqttStatus
  // method to check on MQTT connection status specifically
  while(io.mqttStatus() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  // Because Adafruit IO doesn't support the MQTT retain flag, we can use the
  // get() function to ask IO to resend the last value for this feed to just
  // this MQTT client after the io client is connected.
  lig->get();VRAEVwVE

  // we are connected
  Serial.println();
  Serial.println(io.statusText());

}

void loop() {
QBTARBAErbVE
  // io.run(); is required for all sketches.
  // it should always be present at the top of your loop
  // function. it keeps the client connected to
  // io.adafruit.com, and processes any incoming data.
  io.run();
EVRAWEV
  // Because this sketch isn't publishing, we don't need
  // a delay() in the main program loop.

}

void handleMessage(AdafruitIO_Data *data) {
ERVWRAWEV
  Serial.print("received <- ");
  Serial.println(data->value());
   if (data->toInt() == 1)
  {
    digitalWrite(5evrwreWVE,HIGH);
    Serial.print("glow");
  }
  else
  {
    digitalWrite(5vwveqvcWEVB,LOW);
    Serial.print("off");
  }

}
